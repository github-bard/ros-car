疑问：
    1、stm32f103可以驱动几个测速电机？                                四个没问题（不光需要考虑刚需，如编码器，定时器；还要考虑引脚复用，是否引出，是否独立（与其他芯片相连时，还要考虑禁用））	
	2、一个定时器编码器模式有几个输入通道？                           只能有两个ch1、ch2	
	3、motor.c 速度控制函数为什么要+10000？	
	4、一个while死循环执行不了一遍？                                  被中断处理函数打断	
	5、串口助手如何发送指定字节数的数据？                             1个字节=8个比特；用16进制发	
	6、可不可以用一个定时器边读取数据边计算？                         应该不可以		
	7、中间层通信：无法按预想控制？	
	8、只在使用TIM3时，轮速有明显下降；使用TIM1、TIM8编码器无读取？   程序有问题，TIM3操作中混入了TIM1	
	9、高级定时器有双边沿读取吗？	
	10、中断向量和中断函数对应关系？	
	11、固件库手册中有TIM1_ITConfig，用的时候报错？
	12、odometer函数里const_frame的含义是什么？
	13、motor.c中Car_Control函数有些疑问，为什么要+10000？
	14、TIM6中断处理函数里有那么多程序合适吗？
	15、nivc.c中的flash有什么用？
	16、encoder.c中有一段程序防止前后速度差太大为什么注释？
	17、为什么有那么多强制类型转换？
	18、motor.c中val输入时要+10000，用的时候又-10000，有什么用？
	19、odometer函数只用到两轮速度，需结合四轮差速运动原理修改函数
	20、串口标志位原理

学习：
	1、中断优先级的影响
	2、定时器模式内容及原理
	3、串口原理
	4、麦轮速度解算                       基本明白
	5、差速驱动原理
	6、里程计计算原理

注意：
	1、使用串口烧录时需重新打开hex文件
	2、尝试STMStudio、j-scope波形仿真
	3、写函数时能以参数形式传递，就以参数形式传递。便于分析输入变量，跨文件时减少extern引用外部变量，直接以参数调用。
	4、当几个函数需要即时的同一变量，可以采用全局变量，也可避免return返回多个值
	5、修改定时器（encoder.c/pwm.c）、PID（pid.c）、pwm幅度抑制（encoder.c）、采样时间（encoder.h）、速度转换比例（motor.c）、小车参数（odometer.c）等参数
	6、在.h中定义变量和在.c中定义变量效果不同
	7、电机顺时针转动是电机正转，电机逆时针转动是电机反转
	
下一步：
	1、工程优化：		
		精简函数（函数形式及算法参数）
		按功能分库
	2、中间层通信：
		修改串口通信内容，使之适合四电机
		修改JetsonNano对手柄数据的读取
		修改JetsonNano向下发送数据的格式
	3、pid调参

区别：
	1、nvic.c中断优先级分组不同，flash没用
	2、rcc.c没用
	3、usart.c时钟复用没开                    已解决
	4、pwm.c tim4周期设置不同、ARR未使能      已解决
	5、encoder.c tim6周期设置不同             已解决
	6、encoder.c 编码器没配置滤波             
	

/***********************************************  说明  *****************************************************************
*
*   1.串口接收
*    （1）内容：小车左右轮速度,单位:mm/s（所有数据都为float型，float型占4字节）
*    （2）格式：10字节 [右轮速度4字节][左轮速度4字节][结束符"\r\n"2字节]
*
*   2.串口发送
*    （1）内容：里程计（x,y坐标、线速度、角速度和方向角，单位依次为：mm,mm,mm/s,rad/s,rad，所有数据都为float型，float型占4字节）
*    （2）格式：21字节 [x坐标4字节][y坐标4字节][方向角4字节][线速度4字节][角速度4字节][结束符"\n"1字节]
*
************************************************************************************************************************/
小端存储，串口内容先出低位后出高位